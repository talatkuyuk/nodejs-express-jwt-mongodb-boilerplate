components:
  ##################### SCHEMES ***************************
  schemas:
    # SIGNUP FORM IN REQUEST.BODY
    form-signup:
      type: object
      # required:
      #   - email
      #   - password
      #   - passwordConfirmation
      properties:
        email:
          type: string
          format: email
          description: must be in valid form
        password:
          type: string
          format: password
          # minLength: 8
          description: minimum length is 8; and at least one number, uppercase, lowercase, and special char
        passwordConfirmation:
          type: string
          format: password
          description: same value with the password
      example:
        email: talatkuyuk@gmail.com
        password: Pass1word!
        passwordConfirmation: Pass1word!

    # LOGIN FORM IN REQUEST.BODY
    form-login:
      type: object
      # required:
      #   - email
      #   - password
      properties:
        email:
          type: string
          format: email
          description: must be in valid form
        password:
          type: string
          format: password
          description: must not be empty
      example:
        email: talatkuyuk@gmail.com
        password: Pass1word!

    # REFRESH-TOKEN FORM IN REQUEST.BODY
    form-refresh-token:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: eyJhb.INPUT_YOUR_REFRESH_TOKEN_HERE.m1U63

    # FORGOT PASSWORD FORM IN REQUEST.BODY
    form-forgot-password:
      type: object
      # required:
      #   - email
      properties:
        email:
          type: string
          format: email
          description: the email that the reset password link is going to be sent
          example: talatkuyuk@gmail.com

    # RESET PASSWORD FORM IN REQUEST.BODY
    form-reset-password:
      type: object
      # required:
      #   - password
      #   - passwordConfirmation
      #   - token
      properties:
        password:
          type: string
          format: password
          # minLength: 8
          description: minimum length is 8; and at least one number, uppercase, lowercase, and special char
        passwordConfirmation:
          type: string
          format: password
          description: same value with the password
        token:
          type: string
          description: reset password token
      example:
        password: Pass1word!
        passwordConfirmation: Pass1word!
        token: lkfkldE-reset-password-token-oflkmFDDkf

    # VERIFY EMAIL OR VERIFY SIGNUP FORM IN REQUEST.BODY
    form-token-inside:
      type: object
      # required:
      #   - token
      properties:
        token:
          type: string
          description: jwt for verification
          example: json-web-token-string

    # ADD AUTHUSER FORM IN REQUEST.BODY
    form-add-authuser:
      type: object
      # required:
      #   - email
      #   - password
      #   - passwordConfirmation
      properties:
        email:
          type: string
          format: email
          description: must be in valid form
        password:
          type: string
          format: password
          # minLength: 8
          description: minimum length is 8; and at least one number, uppercase, lowercase, and special char
        passwordConfirmation:
          type: string
          format: password
          description: same value with the password
      example:
        email: talatkuyuk@gmail.com
        password: Pass1word!
        passwordConfirmation: Pass1word!

    # CHANGE PASSWORD FORM IN REQUEST.BODY
    form-change-password:
      type: object
      # required:
      #   - currentPassword
      #   - password
      #   - passwordConfirmation
      properties:
        currentPassword:
          type: string
          format: password
          description: Current password
        password:
          type: string
          format: password
          # minLength: 8
          description: minimum length is 8; and at least one number, uppercase, lowercase, and special char
        passwordConfirmation:
          type: string
          format: password
          description: same value with the password
      example:
        currentPassword: Curr9pasS+
        password: Pass1word!
        passwordConfirmation: Pass1word!

    # ADD USER FORM IN REQUEST.BODY
    form-add-user:
      type: object
      # required:
      #   - email
      #   - role
      #   - name
      #   - gender
      #   - country
      properties:
        email:
          type: string
          format: email
          description: must be in valid form
        role:
          type: string
          description: user role, should be "user"
        name:
          type: string
          # minLength: 2
          description: user name, minimum 2-length
        gender:
          type: string
          # enum: ["male", "female", "none"]
          description: user gender, male/female/none
        country:
          type: string
          description: 3-letter standart country code
      example:
        email: talatkuyuk@gmail.com
        role: user
        name: Talat
        gender: male
        country: TUR

    # UPDATE USER FORM IN REQUEST.BODY
    form-update-user:
      type: object
      # required:
      #   - name
      #   - gender
      #   - country
      properties:
        name:
          type: string
          # minLength: 2
          description: user name, minimum 2-length
        gender:
          type: string
          # enum: ["male", "female", "none"]
          description: user gender, male/female/none
        country:
          type: string
          description: 3-letter standart country code
      example:
        name: Talat
        gender: male
        country: TUR

    # CHANGE USER ROLE IN REQUEST.BODY
    form-change-role:
      type: object
      # required:
      #   - role
      properties:
        role:
          type: string
          # enum: ["admin", "user"]
          description: user role, admin/user
      example:
        role: admin

    # AUTHUSER IN RESPONSE
    authuser:
      type: object
      properties:
        id:
          type: string
          description: MongoDb.ObjectId
        email:
          type: string
          format: email
        isEmailVerified:
          type: boolean
        isDisabled:
          type: boolean
        createdAt:
          type: date-time
          description: unix time like 7635472654762
        services:
          type: object
          properties:
            emailpassword:
              type: string
              enum: [registered, unregistered]
            google:
              type: string
              description: google-oauth-id
            facebook:
              type: string
              description: facebook-oauth-id

    # USER IN RESPONSE
    user:
      type: object
      properties:
        id:
          type: string
          description: MongoDb.ObjectId
        email:
          type: string
          format: email
        role:
          type: string
        name:
          type: string
        gender:
          type: string
        country:
          type: string
        createdAt:
          type: date-time
          description: unix time like 7635472654762

    # ACCESS-REFRESH TOKENS IN RESPONSE
    tokens:
      type: object
      properties:
        access:
          type: object
          properties:
            token:
              type: string
            expires:
              type: string
              format: date-time
        refresh:
          type: object
          properties:
            token:
              type: string
            expires:
              type: string
              format: date-time

    # ERROR
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          value: false
        error:
          type: object
          properties:
            code:
              type: number
              description: The status code of the response
            name:
              type: string
              description: The error name
            message:
              type: string
              description: The error message

    # VALIDATION ERROR
    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          value: false
        error:
          type: object
          properties:
            code:
              type: number
              value: 422
            name:
              type: string
              value: "ValidationError"
            message:
              type: string
              value: "The request could not be validated"
            errors:
              type: object
              description: "{ key1: string[], key2: string[], ... } The keys refer to a property name validation failed in the requestbody (email, password etc.), having value which is an array of string that refers to specific error message for that property"

  ##################### RESPONSES ***************************
  responses:
    SuccessResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                value: true

    SignUpValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### General
        * _Any extra parameter is not allowed other than ['email', 'password', 'passwordConfirmation']_
        ###### Email related
        * _must not be empty_
        * _must be valid email address_
        * _email is already taken_
        ###### Password related
        * _must not be empty_
        * _must be minimum 8 characters_
        * _must contain uppercase, lowercase, number and special char_
        ###### Password confirmation related
        * _must not be empty_
        * _should match with the password_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                email: ["email validation errors appear in a string array"]
                password: ["password validation errors appear in a string array"]
                passwordConfirmation: ["should match with the password"]

    LoginValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### Email related
        * _must not be empty_
        * _must be valid email address_
        ###### Password related
        * _must not be empty_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                email: ["one of the email validation errors appear here"]
                password: ["must not be empty"]

    LoginUnauthorizedFailures:
      description: |
        UNAUTHORIZED

        #### Login Unauthorized Failures
        * _Incorrect email or password_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 401
              name: "ApiError"
              message: "one of the error messages appears here"

    AuthenticateMiddlewareUnauthorizedErrors:
      description: |
        UNAUTHORIZED

        #### TokenError
        * _No auth token_
        * _invalid signature_
        * _jwt malformed_
        * _jwt expired_
        * _jwt not active_
        * _Invalid token type_

        #### ApiError
        * _Access token does not refer any user_
        * _Your browser/agent seems changed or updated, you have to re-login._
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            TokenError:
              value:
                success: false
                error:
                  code: 401
                  name: "TokenError"
                  message: "One of the token errors appears here"
            ApiError:
              value:
                success: false
                error:
                  code: 401
                  name: "ApiError"
                  message: "One of the api errors appears here"

    AuthenticateAndAuthorizeMiddlewaresForbiddenErrors:
      description: |
        FORBIDDEN

        #### ApiError
        * _You are disabled, call the system administrator_
        * _The token is in the blacklist_
        * _Forbidden, (only self-data)_
        * _Forbidden, (you don't have appropriate right)_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 403
              name: "ApiError"
              message: "One of the api errors appears here"

    AuthenticateMiddlewareForbiddenErrors:
      description: |
        FORBIDDEN

        #### ApiError
        * _You are disabled, call the system administrator_
        * _The token is in the blacklist_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 403
              name: "ApiError"
              message: "One of the api errors appears here"

    AuthorizeMiddlewareForbiddenErrors:
      description: |
        FORBIDDEN

        #### ApiError
        * _Forbidden, (only self-data)_
        * _Forbidden, (you don't have appropriate right)_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 403
              name: "ApiError"
              message: "One of the api errors appears here"

    oAuthLoginForbiddenErrors:
      description: |
        FORBIDDEN

        #### ApiError
        * _You are disabled, call the system administrator_
        * _Unauthorized usage of <provider> authentication is detected_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 403
              name: "ApiError"
              message: "One of the api errors appears here"

    oAuthLoginUnauthorizedFailures:
      description: |
        UNAUTHORIZED

        #### ApiError
        * _Passport Bearer Strategy related errors._
        * _provider authentication could not be associated with any identification_
        * _provider oAuth token does not contain necessary email information_

        #### FetchError
        * _Auth provider connection error occured, try later_

        #### AxiosError
        * _Auth provider connection error occured, try later_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 401
              name: "ApiError"
              message: "One of the error messages appears here"

    oAuthLoginBadRequests:
      description: BAD_REQUEST
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 400
              name: "ApiError"
              message: "Badly formed Authorization Header with Bearer."

    LogoutSignoutUnauthorizedErrors:
      description: |
        UNAUTHORIZED

        (Here is continuation of 401 UNAUTHORIZED response above, not 402)

        #### ApiError
        * _refresh token is not valid_
        * _refresh token is in the blacklist_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 401
              name: "ApiError"
              message: "One of the api errors appears here"

    RefreshTokenValidationError:
      description: UNPROCESSABLE ENTITY
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                refreshToken: ["refresh token must not be empty"]

    RefreshTokensUnauthorizedErrors:
      description: |
        UNAUTHORIZED

        #### Refresh Tokens Unauthorized Errors
        * _refresh token is not valid_
        * _Unauthorized use of the refresh token has been detected. All credentials have been cancelled, you have to re-login to get authentication._
        * _Your browser/agent seems changed or updated, you have to re-login.._
        * _The refresh token is expired. You have to re-login to get authentication._
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 401
              name: "ApiError"
              message: "one of the error messages appears here"

    VerifyTokenUnauthorizedErrors:
      description: |
        UNAUTHORIZED

        #### TokenError
        * _No auth token_
        * _invalid signature_
        * _jwt malformed_
        * _jwt expired_  n/a for refresh token
        * _jwt not active_  n/a for refresh token

        #### ApiError
        * _refresh|resetPassword|verifyEmail token is not valid_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            TokenError:
              value:
                success: false
                error:
                  code: 401
                  name: "TokenError"
                  message: "One of the token errors appears here"
            ApiError:
              value:
                success: false
                error:
                  code: 401
                  name: "ApiError"
                  message: "refresh|resetPassword|verifyEmail token is not valid"

    ForgotPasswordEmailErrors:
      description: |
        BAD REQUEST

        #### ApiError
        * _No recipients defined_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 400
              name: "ApiError"
              message: "No recipients defined"

    ForgotPasswordValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _must not be empty_
        * _must be valid email address_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                email: ["email validation errors appear in a string array"]

    ResetPasswordValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _must not be empty_
        * _must be minimum 8 characters_
        * _must contain uppercase, lowercase, number and special char_
        * _must not be empty_
        * _should match with the password_
        * _token is missing_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                password: ["password validation errors appear in a string array"]
                passwordConfirmation: ["should match with the password"]
                token: ["The query parameter 'token' must not be empty"]

    SendVerificationEmailErrors:
      description: |
        BAD REQUEST

        #### ApiError
        * _Email is already verified_

        ### SmtpError
        * _Error message which comes from the SMTP server_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 400
              name: "ApiError"
              message: "Email is already verified"

    SendEmailInternalServerError:
      description: |
        INTERNAL SERVER ERROR

        #### SmtpError: SMTP server is out of service
        #### ApiError: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 400
              name: "SmtpError"
              message: "SMTP server is out of service"

    VerifyTokenValidationError:
      description: UNPROCESSABLE ENTITY
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                token: ["The query parameter 'token' must not be empty"]

    SendSignupVerificationEmailErrors:
      description: |
        BAD REQUEST

        #### ApiError
        * _Signup is already verified_

        ### SmtpError
        * _Error message which comes from the SMTP server_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 400
              name: "ApiError"
              message: "_Signup is already verified"

    GoogleLoginValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _query param 'method' is missing_
        * _The query param 'method' could be only 'token' or 'code'_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                provider: ["query param 'method' is missing"]

    UnlinkProviderValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _query param 'provider' is missing_
        * _The query param 'provider' should be an auth provider_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                provider: ["query param 'provider' is missing"]

    UnlinkProviderBadRequests:
      description: |
        BAD_REQUEST

        #### ApiError
        * _The auth provider is already unlinked_
        * _There must be one auth provider at least_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 400
              name: "ApiError"
              message: "One of the error messages appears here"

    DisabledForbiddenError:
      description: FORBIDDEN
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 403
              name: "ApiError"
              message: "You are disabled, call the system administrator"

    ParamIdValidationError:
      description: UNPROCESSABLE ENTITY
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                id: ["The param id must be a 24-character number"]

    AuthUserQueryParamsValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _The parameter can only appear once in the query string_       
        * _The query param 'email' must be in valid form_        
        * _The query param 'isDisabled' must be boolean value_
        * _The query param 'isEmailVerified' must be boolean value_
        * _The query param 'page' must be numeric value_
        * _The query param 'size' must be numeric value_
        * _The query param 'size' can be between 1-50_
        * _The query param 'sort' can contains a-zA-Z letters . dot and | pipedelimeter_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                email: ["The query param 'email' must be in valid form"]
                isDisabled: ["The query param 'isDisabled' must be boolean value"]
                isEmailVerified: ["The query param 'isEmailVerified' must be boolean value"]
                page: ["The query param 'page' must be numeric value"]
                size: ["The query param 'size' can be at most 50"]
                sort: ["The parameter can only appear once in the query string"]

    ParamIdAndUnlinkProviderValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _The param id must be a 24-character number_
        * _query param 'provider' is missing_
        * _The query param 'provider' should be an auth provider_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                id: ["The param id must be a 24-character number"]
                provider: ["query param 'provider' is missing"]

    ChangePasswordValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _incorrect current password_
        * _must not be empty_
        * _must not be empty_
        * _must be minimum 8 characters_
        * _must contain uppercase, lowercase, number and special char_
        * _must not be empty_
        * _should match with the password_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                currentPassword: ["must not be empty", "incorrect current password"]
                password: ["password validation errors appear in a string array"]
                passwordConfirmation: ["should match with the password"]

    UserQueryParamsValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _The parameter can only appear once in the query string_
        * _The query param 'role' could be one of admin, user_
        * _The query param 'name' must be minumum 1-length charachter_
        * _The query param 'gender' could be only male, female or none_
        * _The query param 'country' code must be in the form of 3-letter standart country code_
        * _The query param 'page' must be numeric value_
        * _The query param 'size' must be numeric value_
        * _The query param 'size' can be between 1-50_
        * _The query param 'sort' can contains a-zA-Z letters . dot and | pipedelimeter_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                email: ["The query param 'email' must be in valid form"]
                role: ["The query param 'role' could be one of admin, user"]
                name: ["The query param 'name' must be minumum 2-length charachter"]
                page: ["The query param 'page' must be numeric value"]
                size: ["The query param 'size' can be at most 50"]
                sort: ["The parameter can only appear once in the query string"]

    AddUserValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### Parameter Id related
        * _The param id must be a 24-character number_
        * _There is another user with the same id_
        ###### General
        * _There is no correspondent authenticated user with the same id and email_
        * _Any extra parameter is not allowed other than ['email', 'role', 'name', 'gender', 'country']_
        ###### Email related
        * _must not be empty_
        * _must be valid email address_
        ###### Others
        * _must be user_
        * _requires minimum 2 characters_
        * _could be male, female or none_
        * _must be 3-letter standart country code_
        * _could be male, female or none_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                email: ["email validation errors appear in a string array"]
                body: ["There is no correspondent authenticated user with the same id and email"]
                name: ["requires minimum 2 characters"]

    UpdateUserValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### Parameter Id related
        * _The param id must be a 24-character number_
        ###### General
        * _The request body should contain at least one of the name, gender, country_
        * _Any extra parameter is not allowed other than ['name', 'gender', 'country']_
        ###### Others
        * _requires minimum 2 characters_
        * _could be male, female or none_
        * _must be 3-letter standart country code_
        * _could be male, female or none_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                body: ["The request body should contain at least one of the name, gender, country"]
                gender: ["could be male, female or none"]
                country: ["must be 3-letter standart country code"]

    ChangeRoleValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### Parameter Id related
        * _The param id must be a 24-character number_
        ###### General
        * _Any extra parameter is not allowed other than 'role'_
        ###### Role related
        * _role could be one of admin,user_
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponse"
          example:
            success: false
            error:
              code: 422
              name: ValidationError
              message: The request could not be validated
              errors:
                body: ["Any extra parameter is not allowed other than 'role'"]
                id: ["The param id must be a 24-character number"]
                role: ["role could be one of admin,user"]

    NoUserFound:
      description: NOT FOUND
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 404
              name: "ApiError"
              message: "No user found"

    InternalServerError:
      description: INTERNAL SERVER ERROR
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 500
              name: "ApiError"
              message: "Internal Server Error"

    Unauthorized:
      description: UNAUTHORIZED
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 401
              name: "ApiError"
              message: "Unauthorized"

    Forbidden:
      description: FORBIDDEN
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: 403
              name: "ApiError"
              message: "Forbidden"

  ##################### PARAMETERS *********************
  parameters:
    param-authuser-id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: the authuser id
      allowEmptyValue: true

    query-param-page:
      in: query
      name: page
      required: false
      schema:
        type: integer
      description: optional, which page according to the total page of the result records, default is 1 (first page)

    query-param-size:
      in: query
      name: size
      required: false
      schema:
        type: integer
      description: optional, how many records will be on a page, default is 20, max 50.

    query-param-sort:
      in: query
      name: sort
      required: false
      schema:
        type: string
      description: optional, could be more than one, the field that the records be sorted (fieldname.asc|desc), default is createdAt.desc

    query-param-email:
      in: query
      name: email
      required: false
      schema:
        type: string
      description: optional, string in an email form

    query-param-isEmailVerified:
      in: query
      name: isEmailVerified
      required: false
      schema:
        type: string
      description: optional, boolean

    query-param-isDisabled:
      in: query
      name: isDisabled
      required: false
      schema:
        type: string
      description: optional, boolean

    param-user-id:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: the user id
      allowEmptyValue: true

    query-param-role:
      in: query
      name: role
      required: false
      schema:
        type: string
      description: optional, admin or user

    query-param-name:
      in: query
      name: name
      required: false
      schema:
        type: string
      description: optional, at least 2-length name

    query-param-gender:
      in: query
      name: gender
      required: false
      schema:
        type: string
      description: optional, male, female or none

    query-param-country:
      in: query
      name: country
      required: false
      schema:
        type: string
      description: optional, 3-letter standard country code

    query-param-method:
      in: query
      name: method
      required: true
      schema:
        type: string
      description: token or code as a string

    query-param-provider:
      in: query
      name: provider
      required: true
      schema:
        type: string
      description: emailpassword | google | facebook as an auth provider

  ##################### EXAPLES *********************
  examples:
    response-authuser:
      id: 6152fde5c127504eab292d24
      email: talatkuyuk@gmail.com
      isEmailVerified: false
      isDisabled: false
      createdAt: 1632828901965
      services: { "emailpassword": "registered" }

    response-tokens:
      access:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MTUyZmRlNWMxMjc1MDRlYWIyOTJkMjQiLCJpYXQiOjE2MzI4Mjg5MDIsImV4cCI6MTYzMjg1MDUwMiwianRpIjoiMGZmNmZkNzMzYjQ3NWQxY2EzZjMyZTYyN2RmMTQwNjEiLCJ1YSI6InZzY29kZS1yZXN0Y2xpZW50IiwidHlwZSI6ImFjY2VzcyIsIm5iZiI6MTYzMjgyODkwMn0.xw88sTQSvXr84-5nefKJXfKw4VicZS2UNSnvQu9iuuk
        expires: 2021-09-28T17:35:02.040Z
      refresh:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MTUyZmRlNWMxMjc1MDRlYWIyOTJkMjQiLCJpYXQiOjE2MzI4Mjg5MDIsImV4cCI6MTYzNTQyMDkwMiwianRpIjoiMGZmNmZkNzMzYjQ3NWQxY2EzZjMyZTYyN2RmMTQwNjEiLCJ1YSI6InZzY29kZS1yZXN0Y2xpZW50IiwidHlwZSI6InJlZnJlc2giLCJuYmYiOjE2MzI4NTA1MDJ9.mlBB7txKnFW6XPVO1eeQ9W9UkaOzaSIgIWGiDUGqAxg
        expires: 2021-10-28T11:35:02.042Z

    response-query-authusers:
      summary: it returns the authusers queried
      value:
        success: true,
        data:
          {
            authusers:
              [
                {
                  id: 6152fde5c127504eab292d24,
                  email: user1@gmail.com,
                  isEmailVerified: false,
                  isDisabled: false,
                  createdAt: 1632828901111,
                  services: { emailpassword: registered },
                },
                {
                  id: 6152fde5c127504eab292d25,
                  email: user2@gmail.com,
                  isEmailVerified: false,
                  isDisabled: false,
                  createdAt: 1632828902222,
                  services: { emailpassword: unregistered, google: "63876327467767364" },
                },
              ],
            totalCount: 2,
            pagination: { pageIndex: 0, pageNumber: 1, pageCount: 1, pageSize: 20 },
          }

    response-query-users:
      summary: it returns the authusers queried
      value:
        success: true,
        data:
          {
            users:
              [
                {
                  id: 6152fde5c127504eab292d24,
                  email: user1@gmail.com,
                  role: "admin",
                  name: "User1 Brown",
                  gender: "male",
                  country: "TUR",
                  createdAt: 1632828901111,
                },
                {
                  id: 6152fde5c127504eab292d25,
                  email: user2@gmail.com,
                  role: "admin",
                  name: "User2 Brown",
                  gender: "female",
                  country: "USA",
                  createdAt: 1632828902222,
                },
              ],
            totalCount: 2,
            pagination: { pageIndex: 0, pageNumber: 1, pageCount: 1, pageSize: 20 },
          }

    response-user:
      id: 6152fde5c127504eab292d24
      email: talatkuyuk@gmail.com
      role: user
      name: Talat Kuyuk
      gender: male
      country: TUR
      createdAt: 1632828901965

  ##################### SECURITY SCHEMES ****************
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BearerAuth_WithGoogleIdTokenOrAuthCode:
      type: http
      scheme: bearer
      bearerFormat: Bearer <google-idToken> or Bearer <google-authCode>
    BearerAuth_WithFacebookAccessToken:
      type: http
      scheme: bearer
      bearerFormat: Bearer <facebook accessToken>
    google_id_token:
      type: "oauth2"
      description: This API uses OAuth 2 with the implicit grand flow.
      flows:
        implicit:
          authorizationUrl: "https://accounts.google.com/o/oauth2/v2/auth"
          tokenUrl: https://www.googleapis.com/oauth2/v4/token
          x-google-issuer: "https://accounts.google.com"
          x-google-jwks_uri: "https://www.googleapis.com/oauth2/v3/certs"
          # Optional. Replace YOUR-CLIENT-ID with your client ID
          x-google-audiences: "831846632-gsn4gqhumc1dmgv1tjupkivqo16g3330.apps.googleusercontent.com"
          scopes:
            email: https://www.googleapis.com/auth/userinfo.email
            profile: https://www.googleapis.com/auth/userinfo.profile
    google_oAuth_2:
      type: oauth2
      description: This API uses OAuth 2 with the authorizationCode flow.
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://www.googleapis.com/oauth2/v4/token
          scopes:
            email: https://www.googleapis.com/auth/userinfo.email
            profile: https://www.googleapis.com/auth/userinfo.profile
