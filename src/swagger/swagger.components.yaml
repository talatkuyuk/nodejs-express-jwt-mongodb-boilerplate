components:

  ##################### SCHEMES ***************************
  schemas:

    # SIGNUP FORM IN REQUEST.BODY
    form-signup:
      type: object
      # required:
      #   - email
      #   - password
      #   - passwordConfirmation
      properties:
        email:
          type: string
          format: email
          description: must be in valid form
        password:
          type: string
          format: password
          # minLength: 8
          description: minimum length is 8; and at least one number, uppercase, lowercase, and special char
        passwordConfirmation:
          type: string
          format: password
          description: same value with the password
      example:
        email: talatkuyuk@gmail.com
        password: Pass1word!
        passwordConfirmation: Pass1word!


    # LOGIN FORM IN REQUEST.BODY
    form-login:
      type: object
      # required:
      #   - email
      #   - password
      properties:
        email:
          type: string
          format: email
          description: must be in valid form
        password:
          type: string
          format: password
          description: must not be empty
      example:
        email: talatkuyuk@gmail.com
        password: Pass1word!      

        
    # REFRESH-TOKEN FORM IN REQUEST.BODY
    form-refresh-token:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: eyJhb.INPUT_YOUR_REFRESH_TOKEN_HERE.m1U63


    # FORGOT PASSWORD FORM IN REQUEST.BODY
    form-forgot-password:
      type: object
      # required:
      #   - email
      properties:
        email:
          type: string
          format: email
          description: the email that the reset password link is going to be sent
          example: talatkuyuk@gmail.com


    # RESET PASSWORD FORM IN REQUEST.BODY
    form-reset-password:
      type: object
      # required:
      #   - password
      #   - passwordConfirmation
      #   - token
      properties:
        password:
          type: string
          format: password
          # minLength: 8
          description: minimum length is 8; and at least one number, uppercase, lowercase, and special char
        passwordConfirmation:
          type: string
          format: password
          description: same value with the password
        token:
          type: string
          description: reset password token
      example:
        password: Pass1word!
        passwordConfirmation: Pass1word!
        token: lkfkldE-reset-password-token-oflkmFDDkf


    # VERIFY EMAIL FORM IN REQUEST.BODY
    form-verify-email:
      type: object
      # required:
      #   - token
      properties:
        token:
          type: string
          description: reset password token
          example: lkfkldE-verify-email-token-oflkmFDDkf


    # AUTHUSER IN RESPONSE
    authuser:
      type: object
      properties:
        id:
          type: string
          description: MongoDb.ObjectId
        email:
          type: string
          format: email
        isEmailVerified:
          type: boolean
        isDisabled:
          type: boolean
        createdAt:
          type: date-time
          description: unix time like 7635472654762
        services: 
          type: object
          properties:
            emailpassword:
              type: string
              enum: [registered, unregistered]
            google:
              type: string
              description: google-oauth-id
            facebook:
              type: string
              description: facebook-oauth-id   
      

    # ADD AUTHUSER FORM IN REQUEST.BODY
    form-add-authuser:
      type: object
      # required:
      #   - email
      #   - password
      #   - passwordConfirmation
      properties:
        email:
          type: string
          format: email
          description: must be in valid form
        password:
          type: string
          format: password
          # minLength: 8
          description: minimum length is 8; and at least one number, uppercase, lowercase, and special char
        passwordConfirmation:
          type: string
          format: password
          description: same value with the password
      example:
        email: talatkuyuk@gmail.com
        password: Pass1word!
        passwordConfirmation: Pass1word!


    # CHANGE PASSWORD FORM IN REQUEST.BODY
    form-change-password:
      type: object
      # required:
      #   - currentPassword
      #   - password
      #   - passwordConfirmation
      properties:
        currentPassword:
          type: string
          format: password
          description: Current password
        password:
          type: string
          format: password
          # minLength: 8
          description: minimum length is 8; and at least one number, uppercase, lowercase, and special char
        passwordConfirmation:
          type: string
          format: password
          description: same value with the password
      example:
        currentPassword: Curr9pasS+
        password: Pass1word!
        passwordConfirmation: Pass1word!
  

    # USER IN RESPONSE
    user:
      type: object
      properties:
        id:
          type: string
          description: MongoDb.ObjectId
        email:
          type: string
          format: email
        role:
          type: string
        name:
          type: string
        gender:
          type: string
        country:
          type: string
        createdAt:
          type: date-time
          description: unix time like 7635472654762


    # ADD USER FORM IN REQUEST.BODY
    form-add-user:
      type: object
      # required:
      #   - email
      #   - role
      #   - name
      #   - gender
      #   - country
      properties:
        email:
          type: string
          format: email
          description: must be in valid form
        role:
          type: string
          description: user role, should be "user"
        name:
          type: string
          # minLength: 2
          description: user name, minimum 2-length
        gender:
          type: string
          # enum: ["male", "female", "none"]
          description: user gender, male/female/none
        country:
          type: string
          description: 3-letter standart country code
      example:
        email: talatkuyuk@gmail.com
        role: user
        name: Talat
        gender: male
        country: TUR


    # UPDATE USER FORM IN REQUEST.BODY
    form-update-user:
      type: object
      # required:
      #   - name
      #   - gender
      #   - country
      properties:
        name:
          type: string
          # minLength: 2
          description: user name, minimum 2-length
        gender:
          type: string
          # enum: ["male", "female", "none"]
          description: user gender, male/female/none
        country:
          type: string
          description: 3-letter standart country code
      example:
        name: Talat
        gender: male
        country: TUR


    # CHANGE USER ROLE IN REQUEST.BODY
    form-change-role:
      type: object
      # required:
      #   - role
      properties:
        role:
          type: string
          # enum: ["admin", "user"]
          description: user role, admin/user
      example:
        role: admin


    # ACCESS-REFRESH TOKENS IN RESPONSE
    tokens:
      type: object
      properties:
        access:
          type: object
          properties:
            token:
              type: string
            expires:
              type: string
              format: date-time
        refresh:
          type: object
          properties:
            token:
              type: string
            expires:
              type: string
              format: date-time


    # ERROR
    Error:
      type: object
      properties:
        code:
          type: number
          description: The status code of the response
        name:
          type: string
          description: The error name
        message:
          type: string
          description: The error message
        description:
          type: string
          description: The service name that the error occured, only in development environment


    # VALIDATION ERROR
    ValidationError:
      type: object
      properties:
        code:
          type: number
          value: 422
        name:
          type: string
          value: "ValidationError"
        message:
          type: string
          value: "The request could not be validated"
        errors:
          type: object
          description: "{ key1: string[], key2: string[], ... } The keys refer to a property name validation failed in the requestbody (email, password etc.), having value which is an array of string that refers to specific error message for that property"



  ##################### RESPONSES ***************************
  responses:

    SignUpValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### General
        * _Any extra parameter is not allowed other than ['email', 'password', 'passwordConfirmation']_
        ###### Email related
        * _must not be empty_
        * _must be valid email address_
        * _email is already taken_
        ###### Password related
        * _must not be empty_
        * _must be minimum 8 characters_
        * _must contain uppercase, lowercase, number and special char_
        ###### Password confirmation related
        * _must not be empty_
        * _should match with the password_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              email: ["email validation errors appear in a string array"],
              password: ["password validation errors appear in a string array"],
              passwordConfirmation: ["should match with the password"]
            }

    LoginValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### Email related
        * _must not be empty_
        * _must be valid email address_
        ###### Password related
        * _must not be empty_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              email: ["one of the email validation errors appear here"],
              password: ["must not be empty"],
            }

    LoginUnauthorizedFailures:
      description: | 
        UNAUTHORIZED

        #### Login Unauthorized Failures
        * _Incorrect email or password_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            name: "ApiError"
            message: "one of the error messages appears here"
            description: "the service name where the error occured"

    AuthenticateMiddlewareUnauthorizedErrors:
      description: | 
        UNAUTHORIZED

        #### TokenErrors
        * _No auth token_
        * _invalid signature_
        * _jwt malformed_
        * _jwt expired_
        * _jwt not active_
        * _Invalid token type_
        
        #### ApiErrors
        * _Access token does not refer any user_
        * _Your browser/agent seems changed or updated, you have to re-login._
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            TokenError:
              value:
                code: 401
                name: "TokenError"
                message: "One of the token errors appears here"
                description: "the service name where the error occured"
            ApiError:
              value:
                code: 401
                name: "ApiError"
                message: "One of the api errors appears here"
                description: "the service name where the error occured"


    AuthenticateAndAuthorizeMiddlewaresForbiddenErrors:
      description: | 
        FORBIDDEN

        #### ApiErrors
        * _You are disabled, call the system administrator_
        * _The token is in the blacklist_
        * _Forbidden, (only self-data)_
        * _Forbidden, (you don't have appropriate right)_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            name: "ApiError"
            message: "One of the api errors appears here"
            description: "the service name where the error occured"


    AuthenticateMiddlewareForbiddenErrors:
      description: | 
        FORBIDDEN

        #### ApiErrors
        * _You are disabled, call the system administrator_
        * _The token is in the blacklist_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            name: "ApiError"
            message: "One of the api errors appears here"
            description: "the service name where the error occured"


    AuthorizeMiddlewareForbiddenErrors:
      description: | 
        FORBIDDEN

        #### ApiErrors
        * _Forbidden, (only self-data)_
        * _Forbidden, (you don't have appropriate right)_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            name: "ApiError"
            message: "One of the api errors appears here"
            description: "the service name where the error occured"


    oAuthLoginForbiddenErrors:
      description: | 
        FORBIDDEN

        #### ApiErrors
        * _You are disabled, call the system administrator_
        * _The token of the auth provider is allowed to be used only once_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            name: "ApiError"
            message: "One of the api errors appears here"
            description: "the service name where the error occured"

        
    oAuthLoginUnauthorizedFailures:
      description: | 
        UNAUTHORIZED

        #### Login Unauthorized Failures
        * _Passport Bearer Strategy related errors._
        * _provider oAuth token could not be associated with any identification_
        * _provider oAuth token does not contain necessary email information_
        * _Auth provider connection error occured, try later_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            name: "ApiError"
            message: "one of the error messages appears here"
            description: "the service name where the error occured"


    oAuthLoginBadRequests:
      description: BAD_REQUEST
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            name: "ApiError"
            message: "Badly formed Authorization Header with Bearer."
            description: "oAuthMiddleware : oAuth(callback) --> AuthenticateMiddleware : oAuth"


    LogoutSignoutUnauthorizedErrors:
      description: | 
        UNAUTHORIZED

        (Here is continuation of 401 UNAUTHORIZED response above, not 402)

        #### ApiErrors
        * _refresh token is not valid_
        * _refresh token is in the blacklist_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            name: "ApiError"
            message: "One of the api errors appears here"
            description: "the service name where the error occured"


    RefreshTokenValidationError:
      description: UNPROCESSABLE ENTITY
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              refreshToken: ["refresh token must not be empty"]
            }


    RefreshTokensUnauthorizedErrors:
      description: | 
        UNAUTHORIZED

        #### Refresh Tokens Unauthorized Errors
        * _refresh token is not valid_
        * _Unauthorized use of the refresh token has been detected. All credentials have been cancelled, you have to re-login to get authentication._
        * _Your browser/agent seems changed or updated, you have to re-login.._
        * _The refresh token is expired. You have to re-login to get authentication._
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            name: "ApiError"
            message: "one of the error messages appears here"
            description: "the service name where the error occured"

    
    VerifyTokenUnauthorizedErrors:
      description: | 
        UNAUTHORIZED

        #### TokenErrors
        * _No auth token_
        * _invalid signature_
        * _jwt malformed_
        * _jwt expired_  n/a for refresh token
        * _jwt not active_  n/a for refresh token

        #### ApiErrors
        * _refresh|resetPassword|verifyEmail token is not valid_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            TokenError:
              value:
                code: 401
                name: "TokenError"
                message: "One of the token errors appears here"
                description: "the service name where the error occured"
            ApiError:
              value:
                code: 401
                name: "ApiError"
                message: "refresh|resetPassword|verifyEmail token is not valid"
                description: "the service name where the error occured"


    ForgotPasswordValidationErrors:
      description: | 
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _must not be empty_
        * _must be valid email address_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              email: ["email validation errors appear in a string array"],
            }


    ResetPasswordValidationErrors:
      description: | 
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _must not be empty_
        * _must be minimum 8 characters_
        * _must contain uppercase, lowercase, number and special char_
        * _must not be empty_
        * _should match with the password_
        * _token is missing_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              password: ["password validation errors appear in a string array"],
              passwordConfirmation: ["should match with the password"],
              token: ["The query parameter 'token' must not be empty"]
            }


    VerifyEmailTokenValidationError:
      description: UNPROCESSABLE ENTITY
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              token: ["The query parameter 'token' must not be empty"]
            }


    DisabledForbiddenError:
      description: FORBIDDEN
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            name: "ApiError"
            message: "You are disabled, call the system administrator"
            description: "the service name where the error occured"


    ParamIdValidationError:
      description: UNPROCESSABLE ENTITY
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              id: ["The param id must be a 24-character number"]
            }


    AuthUserQueryParamsValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _The parameter can only appear once in the query string_       
        * _The query param 'email' must be in valid form_        
        * _The query param 'isDisabled' must be boolean value_
        * _The query param 'isEmailVerified' must be boolean value_
        * _The query param 'page' must be numeric value_
        * _The query param 'size' must be numeric value_
        * _The query param 'size' can be between 1-50_
        * _The query param 'sort' can contains a-zA-Z letters . dot and | pipedelimeter_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              email: ["The query param 'email' must be in valid form"],
              isDisabled: ["The query param 'isDisabled' must be boolean value"],
              isEmailVerified: ["The query param 'isEmailVerified' must be boolean value"],
              page: ["The query param 'page' must be numeric value"],
              size: ["The query param 'size' can be at most 50"],
              sort: ["The parameter can only appear once in the query string"],
            }


    ChangePasswordValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _incorrect current password_
        * _must not be empty_
        * _must not be empty_
        * _must be minimum 8 characters_
        * _must contain uppercase, lowercase, number and special char_
        * _must not be empty_
        * _should match with the password_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              currentPassword: ["must not be empty", "incorrect current password"],
              password: ["password validation errors appear in a string array"],
              passwordConfirmation: ["should match with the password"]
            }


    UserQueryParamsValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        * _The parameter can only appear once in the query string_
        * _The query param 'email' must be in valid form_
        * _The query param 'role' could be one of admin, user_
        * _The query param 'name' must be minumum 2-length charachter_
        * _The query param 'gender' could be only male, female or none_
        * _The query param 'country' code must be in the form of 3-letter standart country code_
        * _The query param 'page' must be numeric value_
        * _The query param 'size' must be numeric value_
        * _The query param 'size' can be between 1-50_
        * _The query param 'sort' can contains a-zA-Z letters . dot and | pipedelimeter_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              email: ["The query param 'email' must be in valid form"],
              role: ["The query param 'role' could be one of admin, user"],
              name: ["The query param 'name' must be minumum 2-length charachter"],
              page: ["The query param 'page' must be numeric value"],
              size: ["The query param 'size' can be at most 50"],
              sort: ["The parameter can only appear once in the query string"],
            }


    AddUserValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### Parameter Id related
        * _The param id must be a 24-character number_
        * _There is another user with the same id_
        ###### General
        * _There is no correspondent authenticated user with the same id and email_
        * _Any extra parameter is not allowed other than ['email', 'role', 'name', 'gender', 'country']_
        ###### Email related
        * _must not be empty_
        * _must be valid email address_
        ###### Others
        * _must be user_
        * _requires minimum 2 characters_
        * _could be male, female or none_
        * _must be 3-letter standart country code_
        * _could be male, female or none_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              email: ["email validation errors appear in a string array"],
              body: ["There is no correspondent authenticated user with the same id and email"],
              name: ["requires minimum 2 characters"]
            }


    UpdateUserValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### Parameter Id related
        * _The param id must be a 24-character number_
        ###### General
        * _The request body should contain at least one of the name, gender, country_
        * _Any extra parameter is not allowed other than ['name', 'gender', 'country']_
        ###### Others
        * _requires minimum 2 characters_
        * _could be male, female or none_
        * _must be 3-letter standart country code_
        * _could be male, female or none_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              body: ["The request body should contain at least one of the name, gender, country"],
              gender: ["could be male, female or none"],
              country: ["must be 3-letter standart country code"],
            }


    ChangeRoleValidationErrors:
      description: |
        UNPROCESSABLE ENTITY

        #### ValidationErrors
        ###### Parameter Id related
        * _The param id must be a 24-character number_
        ###### General
        * _Any extra parameter is not allowed other than 'role'_
        ###### Role related
        * _role could be one of admin,user_
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            code: 422
            name: ValidationError
            message: The request could not be validated
            errors: {
              body: ["Any extra parameter is not allowed other than 'role'"],
              id: ["The param id must be a 24-character number"],
              role: ["role could be one of admin,user"],
            }


    NoUserFound:
      description: NOT FOUND
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            name: ApiError
            message: No user found
            description: "the service name where the error occured"


    InternalServerError:
      description: INTERNAL SERVER ERROR
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            name: ApiError
            message: Internal Server Error
            description: "the service name where the error occured"


    Unauthorized:
      description: UNAUTHORIZED
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            name: ApiError
            message: Unauthorized
            description: "the service name where the error occured"
          
    Forbidden:
      description: FORBIDDEN
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            name: ApiError
            message: Forbidden
            description: "the service name where the error occured"



  ##################### PARAMETERS *********************
  parameters:
    param-authuser-id:  
      in: path
      name: id
      schema:
        type: string
      required: false
      description: the authuser id
      allowEmptyValue: true

    query-param-page:
      in: query
      name: page
      required: false
      schema:
        type: integer
      description: optional, which page according to the total page of the result records, default is 1 (first page)

    query-param-size:
      in: query
      name: size
      required: false
      schema:
        type: integer
      description: optional, how many records will be on a page, default is 20, max 50.

    query-param-sort:
      in: query
      name: sort
      required: false
      schema:
        type: string
      description: optional, could be more than one, the field that the records be sorted (fieldname.asc|desc), default is createdAt.desc

    query-param-email:
      in: query
      name: email
      required: false
      schema:
        type: string
      description: optional, string in an email form

    query-param-isEmailVerified:
      in: query
      name: isEmailVerified
      required: false
      schema:
        type: string
      description: optional, boolean

    query-param-isDisabled:
      in: query
      name: isDisabled
      required: false
      schema:
        type: string
      description: optional, boolean

    param-user-id:
      in: path
      name: id
      schema:
        type: string
      required: false
      description: the user id
      allowEmptyValue: true

    query-param-role:
      in: query
      name: role
      required: false
      schema:
        type: string
      description: optional, admin or user

    query-param-name:
      in: query
      name: name
      required: false
      schema:
        type: string
      description: optional, at least 2-length name

    query-param-gender:
      in: query
      name: gender
      required: false
      schema:
        type: string
      description: optional, male, female or none

    query-param-country:
      in: query
      name: country
      required: false
      schema:
        type: string
      description: optional, 3-letter standard country code

  ##################### EXAPLES *********************
  examples:

    response-authuser:
      id: 6152fde5c127504eab292d24
      email: talatkuyuk@gmail.com
      isEmailVerified: false
      isDisabled: false
      createdAt: 1632828901965
      services: { "emailpassword": "registered" }


    response-tokens:
      access:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MTUyZmRlNWMxMjc1MDRlYWIyOTJkMjQiLCJpYXQiOjE2MzI4Mjg5MDIsImV4cCI6MTYzMjg1MDUwMiwianRpIjoiMGZmNmZkNzMzYjQ3NWQxY2EzZjMyZTYyN2RmMTQwNjEiLCJ1YSI6InZzY29kZS1yZXN0Y2xpZW50IiwidHlwZSI6ImFjY2VzcyIsIm5iZiI6MTYzMjgyODkwMn0.xw88sTQSvXr84-5nefKJXfKw4VicZS2UNSnvQu9iuuk
        expires: 2021-09-28T17:35:02.040Z
      refresh:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MTUyZmRlNWMxMjc1MDRlYWIyOTJkMjQiLCJpYXQiOjE2MzI4Mjg5MDIsImV4cCI6MTYzNTQyMDkwMiwianRpIjoiMGZmNmZkNzMzYjQ3NWQxY2EzZjMyZTYyN2RmMTQwNjEiLCJ1YSI6InZzY29kZS1yZXN0Y2xpZW50IiwidHlwZSI6InJlZnJlc2giLCJuYmYiOjE2MzI4NTA1MDJ9.mlBB7txKnFW6XPVO1eeQ9W9UkaOzaSIgIWGiDUGqAxg
        expires: 2021-10-28T11:35:02.042Z
      

    response-tokens-for-refresh:
      summary: it consists access and refresh tokens
      value:
        access:
          token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MTUyZmRlNWMxMjc1MDRlYWIyOTJkMjQiLCJpYXQiOjE2MzI4Mjg5MDIsImV4cCI6MTYzMjg1MDUwMiwianRpIjoiMGZmNmZkNzMzYjQ3NWQxY2EzZjMyZTYyN2RmMTQwNjEiLCJ1YSI6InZzY29kZS1yZXN0Y2xpZW50IiwidHlwZSI6ImFjY2VzcyIsIm5iZiI6MTYzMjgyODkwMn0.xw88sTQSvXr84-5nefKJXfKw4VicZS2UNSnvQu9iuuk
          expires: 2021-09-28T17:35:02.040Z
        refresh:
          token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2MTUyZmRlNWMxMjc1MDRlYWIyOTJkMjQiLCJpYXQiOjE2MzI4Mjg5MDIsImV4cCI6MTYzNTQyMDkwMiwianRpIjoiMGZmNmZkNzMzYjQ3NWQxY2EzZjMyZTYyN2RmMTQwNjEiLCJ1YSI6InZzY29kZS1yZXN0Y2xpZW50IiwidHlwZSI6InJlZnJlc2giLCJuYmYiOjE2MzI4NTA1MDJ9.mlBB7txKnFW6XPVO1eeQ9W9UkaOzaSIgIWGiDUGqAxg
          expires: 2021-10-28T11:35:02.042Z


    response-query-authusers:
      summary: it returns the authusers queried
      value:
        users: [
          {
            id: 6152fde5c127504eab292d24,
            email: user1@gmail.com,
            isEmailVerified: false,
            isDisabled: false,
            createdAt: 1632828901111,
            services: { emailpassword: registered }
          },
          {
            id: 6152fde5c127504eab292d25,
            email: user2@gmail.com,
            isEmailVerified: false,
            isDisabled: false,
            createdAt: 1632828902222,
            services: { emailpassword: unregistered, google: "63876327467767364" }
          },
        ]
        totalCount: 2
        pagination: {
          currentPage: 1,
          totalPages: 1,
          perPage: 20,
        }

                    
    response-query-users:
      summary: it returns the authusers queried
      value:
        users: [
          {
            id: 6152fde5c127504eab292d24,
            email: user1@gmail.com,
            role: "admin",
            name: "User1 Brown",
            gender: "male",
            country: "TUR",
            createdAt: 1632828901111,
          },
          {
            id: 6152fde5c127504eab292d25,
            email: user2@gmail.com,
            role: "admin",
            name: "User2 Brown",
            gender: "female",
            country: "USA",
            createdAt: 1632828902222,
          },
        ]
        totalCount: 2
        pagination: {
          currentPage: 1,
          totalPages: 1,
          perPage: 20,
        }

    response-user:
      id: 6152fde5c127504eab292d24
      email: talatkuyuk@gmail.com
      role: user
      name: Talat Kuyuk
      gender: male
      country: TUR
      createdAt: 1632828901965

  ##################### SECURITY SCHEMES ****************
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BearerAuth_WithGoogleIdToken:
      type: http
      scheme: bearer
      bearerFormat: google idToken or facebook accessToken
    BearerAuth_WithFacebookAccessToken:
      type: http
      scheme: bearer
      bearerFormat: google idToken or facebook accessToken
    google_id_token:
      type: "oauth2"
      description: This API uses OAuth 2 with the implicit grand flow.
      flows:
        implicit:
          authorizationUrl: "https://accounts.google.com/o/oauth2/v2/auth"
          tokenUrl: https://www.googleapis.com/oauth2/v4/token
          x-google-issuer: "https://accounts.google.com"
          x-google-jwks_uri: "https://www.googleapis.com/oauth2/v3/certs"
          # Optional. Replace YOUR-CLIENT-ID with your client ID
          x-google-audiences: "831846632-gsn4gqhumc1dmgv1tjupkivqo16g3330.apps.googleusercontent.com"
          scopes:
            email: https://www.googleapis.com/auth/userinfo.email
            profile: https://www.googleapis.com/auth/userinfo.profile
    google_oAuth_2:
      type: oauth2
      description: This API uses OAuth 2 with the authorizationCode flow.
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://www.googleapis.com/oauth2/v4/token
          scopes:
            email: https://www.googleapis.com/auth/userinfo.email
            profile: https://www.googleapis.com/auth/userinfo.profile
            