### SIGNUP ###
/auth/signup:
  post:
    summary: Signup
    description: receives the registration form and returns the authuser info and tokens
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/form-signup"
        application/json:
          schema:
            $ref: "#/components/schemas/form-signup"
    responses:
      201:
        description: Created
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  value: true
                data:
                  type: object
                  properties:
                    authuser:
                      $ref: "#/components/schemas/authuser"
                      example:
                        $ref: "#components/examples/response-authuser"
                    tokens:
                      $ref: "#/components/schemas/tokens"
                      example:
                        $ref: "#components/examples/response-tokens"
      422:
        $ref: "#/components/responses/SignUpValidationErrors"
      500:
        $ref: "#/components/responses/InternalServerError"

### LOGIN ###
/auth/login:
  post:
    summary: Login
    description: receives the login form and returns the authuser info and tokens
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/form-login"
        application/json:
          schema:
            $ref: "#/components/schemas/form-login"
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  value: true
                data:
                  type: object
                  properties:
                    authuser:
                      $ref: "#/components/schemas/authuser"
                      example:
                        $ref: "#components/examples/response-authuser"
                    tokens:
                      $ref: "#/components/schemas/tokens"
                      example:
                        $ref: "#components/examples/response-tokens"
      401:
        $ref: "#/components/responses/LoginUnauthorizedFailures"
      403:
        $ref: "#/components/responses/DisabledForbiddenError"
      404:
        $ref: "#/components/responses/NoUserFound"
      422:
        $ref: "#/components/responses/LoginValidationErrors"
      500:
        $ref: "#/components/responses/InternalServerError"

### LOGOUT ###
/auth/logout:
  post:
    summary: Logout
    description: gets logged the authuser out, deletes the refresh token family and revokes the access tokens
    tags: [Auth]
    security:
      - BearerAuth: []
    responses:
      200:
        $ref: "#/components/responses/SuccessResponse"
      401:
        $ref: "#/components/responses/AuthenticateMiddlewareUnauthorizedErrors"
      402:
        $ref: "#/components/responses/LogoutSignoutUnauthorizedErrors"
      403:
        $ref: "#/components/responses/AuthenticateMiddlewareForbiddenErrors"
      500:
        $ref: "#/components/responses/InternalServerError"

### SIGNOUT ###
/auth/signout:
  post:
    summary: Signout
    description: gets signed the authuser out, deletes all the user data and tokens and revokes the access tokens
    tags: [Auth]
    security:
      - BearerAuth: []
    responses:
      200:
        $ref: "#/components/responses/SuccessResponse"
      401:
        $ref: "#/components/responses/AuthenticateMiddlewareUnauthorizedErrors"
      403:
        $ref: "#/components/responses/AuthenticateMiddlewareForbiddenErrors"
      500:
        $ref: "#/components/responses/InternalServerError"

### REFRESH-TOKENS ###
/auth/refresh-tokens:
  post:
    summary: Refresh auth tokens
    description: receives the refresh token, implements refresh token rotation and sends the new tokens
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/form-refresh-token"
        application/json:
          schema:
            $ref: "#/components/schemas/form-refresh-token"
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  value: true
                data:
                  type: object
                  properties:
                    tokens:
                      $ref: "#/components/schemas/tokens"
                      example:
                        $ref: "#components/examples/response-tokens"
      401:
        $ref: "#/components/responses/RefreshTokensUnauthorizedErrors"
      403:
        $ref: "#/components/responses/DisabledForbiddenError"
      404:
        $ref: "#/components/responses/NoUserFound"
      422:
        $ref: "#/components/responses/RefreshTokenValidationError"
      500:
        $ref: "#/components/responses/InternalServerError"

### FORGOT-PASSWORD ###
/auth/forgot-password:
  post:
    summary: Forgot password
    description: sends an email with a link and token in order to reset password
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/form-forgot-password"
        application/json:
          schema:
            $ref: "#/components/schemas/form-forgot-password"
    responses:
      200:
        $ref: "#/components/responses/SuccessResponse"
      400:
        $ref: "#/components/responses/ForgotPasswordEmailErrors"
      403:
        $ref: "#/components/responses/DisabledForbiddenError"
      404:
        $ref: "#/components/responses/NoUserFound"
      422:
        $ref: "#/components/responses/ForgotPasswordValidationErrors"
      500:
        $ref: "#/components/responses/SendEmailInternalServerError"

### RESET-PASSWORD ###
/auth/reset-password:
  post:
    summary: Reset password
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/form-reset-password"
        application/json:
          schema:
            $ref: "#/components/schemas/form-reset-password"
    responses:
      200:
        $ref: "#/components/responses/SuccessResponse"
      401:
        $ref: "#/components/responses/VerifyTokenUnauthorizedErrors"
      403:
        $ref: "#/components/responses/DisabledForbiddenError"
      404:
        $ref: "#/components/responses/NoUserFound"
      422:
        $ref: "#/components/responses/ResetPasswordValidationErrors"
      500:
        $ref: "#/components/responses/InternalServerError"

### SEND-VERIFICATION-EMAIL ###
/auth/send-verification-email:
  post:
    summary: Send verification email
    description: An email will be sent to verify email.
    tags: [Auth]
    security:
      - BearerAuth: []
    responses:
      200:
        $ref: "#/components/responses/SuccessResponse"
      400:
        $ref: "#/components/responses/SendVerificationEmailErrors"
      401:
        $ref: "#/components/responses/AuthenticateMiddlewareUnauthorizedErrors"
      403:
        $ref: "#/components/responses/AuthenticateMiddlewareForbiddenErrors"
      500:
        $ref: "#/components/responses/SendEmailInternalServerError"

### VERIFY-EMAIL ###
/auth/verify-email:
  post:
    summary: Verify email
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/form-verify-email"
        application/json:
          schema:
            $ref: "#/components/schemas/form-verify-email"
    responses:
      200:
        $ref: "#/components/responses/SuccessResponse"
      401:
        $ref: "#/components/responses/VerifyTokenUnauthorizedErrors"
      403:
        $ref: "#/components/responses/DisabledForbiddenError"
      404:
        $ref: "#/components/responses/NoUserFound"
      422:
        $ref: "#/components/responses/VerifyEmailTokenValidationError"
      500:
        $ref: "#/components/responses/InternalServerError"

### GOOGLE ###
/auth/google:
  post:
    summary: Login with Google
    description: receives the google id token or google auth code in header; and returns the authuser info and tokens
    tags: [Auth]
    security:
      - BearerAuth_WithGoogleIdTokenOrAuthCode: []
      # - google_id_token: ["email", "profile"]
      # - google_oAuth_2: ["email", "profile"]
    parameters:
      - $ref: "#/components/parameters/query-param-method"
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  value: true
                data:
                  type: object
                  properties:
                    authuser:
                      $ref: "#/components/schemas/authuser"
                      example:
                        $ref: "#components/examples/response-authuser"
                    tokens:
                      $ref: "#/components/schemas/tokens"
                      example:
                        $ref: "#components/examples/response-tokens"
      400:
        $ref: "#/components/responses/oAuthLoginBadRequests"
      401:
        $ref: "#/components/responses/oAuthLoginUnauthorizedFailures"
      403:
        $ref: "#/components/responses/oAuthLoginForbiddenErrors"
      500:
        $ref: "#/components/responses/InternalServerError"

### FACEBOOK ###
/auth/facebook:
  post:
    summary: Login with Facebook
    description: receives the facebook access token in header; and returns the authuser info and tokens
    tags: [Auth]
    security:
      - BearerAuth_WithFacebookAccessToken: []
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  value: true
                data:
                  type: object
                  properties:
                    authuser:
                      $ref: "#/components/schemas/authuser"
                      example:
                        $ref: "#components/examples/response-authuser"
                    tokens:
                      $ref: "#/components/schemas/tokens"
                      example:
                        $ref: "#components/examples/response-tokens"
      400:
        $ref: "#/components/responses/oAuthLoginBadRequests"
      401:
        $ref: "#/components/responses/oAuthLoginUnauthorizedFailures"
      403:
        $ref: "#/components/responses/oAuthLoginForbiddenErrors"
      500:
        $ref: "#/components/responses/InternalServerError"
